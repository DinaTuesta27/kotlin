package taller02

import kotlin.math.atan
import kotlin.math.pow
import kotlin.math.sqrt

/**
 * Un número complejo consta de una parte real y una parte imaginaria
 */
class NumeroComplejo(var parteReal: Double, var parteImaginaria: Double) {
    // Halla el valor absoluto del número complejo
    fun valorAbsoluto(): Double {
        return sqrt(this.parteReal.pow(2) + parteImaginaria.pow(2))
        //Se pueden extraer los atributos con el this o con el nombre de atributo
    }

    // Halla la fase o argumento del número complejo
    fun argumento(): Double {
        return atan(parteImaginaria / parteReal)
    }

    // Halla el inverso o recíproco de un número complejo
    fun inverso(): NumeroComplejo {
        val denominador = parteReal.pow(2) + parteImaginaria.pow(2)
        val pri = parteReal / denominador
        val pii = -parteImaginaria / denominador
        return NumeroComplejo(pri, pii)
    }

    // Multiplica la parte real y la parte imaginaria por un escalar
    fun productoPorEscalar(escalar: Double) {
        parteReal *= escalar
        parteImaginaria *= escalar

    }

    // Obtiene una versión String del número complejo
    override fun toString(): String {
        return String.format("%.2f + (%.2f)i", parteReal, parteImaginaria)
    }

}
    // Función externa que halla la suma de dos números complejos
    fun sumarNumComplejos(num1: NumeroComplejo, num2: NumeroComplejo): NumeroComplejo {
        val real=num1.parteReal+num2.parteReal
        val imaginario=num1.parteImaginaria+num2.parteImaginaria
        return NumeroComplejo(real,imaginario)
    }

// -----------------------------------------------------------------------------------

// Clase Producto
class Producto(val nombre: String,
               val tipo: String,
               var valorUnitario: Double,
               var cantidadBodega: Int,
               val cantidadMinima: Int) {
    // Retornar el IVA correspondiente al producto. Ojo: este IVA depende del tipo de producto.
    fun darIVA(): Double {
        if (tipo == "papeleria") return 0.16
        if (tipo == "supermercado") return 0.04
        if (tipo == "drogueria") return 0.12
        return 0.0
    }

    //  Calcula el valor final del producto, incluyendo el IVA.
    fun calcularPrecioFinal(): Double {
        val valorIva=valorUnitario*darIVA()
        return valorIva+valorUnitario
    }

    // Vende la cantidad de unidades dada por parámetro.
    fun vender(cantidad: Int) {
        if(cantidadBodega<=cantidad)
            cantidadBodega=0
        if(cantidadBodega>cantidad)
            cantidadBodega-=cantidad
    }

    // Aumenta la cantidad de unidades en bodega del producto en la cantidad que se recibe como dato de entrada.
    fun abastecer(cantidad: Int) {
        cantidadBodega+=cantidad
    }

    // retorna True si la cantidad en Bodega es menor que la cantidad mínima, y False en caso contrario.
    fun puedeAbastecer(): Boolean {
        if(cantidadBodega<cantidadMinima) return true
        return false
    }

    // Obtener una representación visual de un producto.
    override fun toString(): String {
        return "Producto(nombre='$nombre', tipo='$tipo', valorUnitario=$valorUnitario, cantidadBodega=$cantidadBodega, cantidadMinima=$cantidadMinima)"
    }
}
